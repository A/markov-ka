We should use dependecy invertion here We need abstract fabric pattern for it we must planning it what about interface? maybe because errors in the comparator engines is all we need to do are you test it? I can't merge it without 100% code coverage commonjs is better then assets pipelines! maybe we must write very own framework? what about user stories? i need rename this mess again! it's not so abstract to reuse it for the time yo nigga wassup? Oh, i haven't the time to explain this obvious things whhh, what the fack you told about? immutable interface Delegation pattern Functional design Marker interface Property Container Event Channel Abstract factory Builder Factory method Lazy initialization Multiton Object pool Prototype Resource acquisition is initialization Singleton Wrapper adapter networking Bridge Composite object Decorator with inverted Facade Front thin Controller thick Model Flyweight proxy fucking posix in the mouth Chain of responsibility Command shell should we use docker or dockage maybe? Interpreter is not Iterator which also not a Mediator Memento Null objects ruin my API Observer Servant rspec likes Specification we use Behavior Driven Development State Strategy which Template engine should we use? Sass slim or stylus with jade method Visitor Simple Policy ed2 Single-serving visitor Hierarchical visitor ActiveRecord is too heavy we'll use mongo ruby driver Business Delegate Composite Entity Composite i prefer manager position if you know what i am saying View DAO Dispatcher View Front Controller Intercepting let's chain classes one with another or maybe engines? Filter Registry Service Activator Service Locator Service to Worker Session Facade Transfer Object Assembler Transfer Object Value List Handler View Helper Unit of Work Repository Active object Balking Binding Properties Messaging design pattern Double-checked locking Event-based asynchronous Lock Guarded suspension Monitor object domain oriented architecture Reactor Read-write lock Scheduler Thread pool Thread-specific storage Single Thread Execution Cooperative pattern Model-View-Controller Model-View-Presenter Model-View-View Model Presentation-Abstraction-Control
